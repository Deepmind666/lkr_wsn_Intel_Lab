#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n综合算法评估结果可视化\n\"\"\"\n\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom pathlib import Path\nimport os\nfrom datetime import datetime\n\ndef load_comprehensive_results(json_file: str) -> pd.DataFrame:\n    \"\"\"加载综合实验结果并转换为DataFrame\"\"\"\n    with open(json_file, 'r', encoding='utf-8') as f:\n        results = json.load(f)\n    \n    # 提取每个算法的metrics\n    data = []\n    for result in results:\n        if 'algorithm' in result and 'metrics' in result:\n            row = {'Algorithm': result['algorithm']}\n            row.update(result['metrics'])\n            data.append(row)\n    \n    return pd.DataFrame(data)\n\ndef create_comprehensive_plots(df: pd.DataFrame, output_dir: str):\n    \"\"\"创建综合算法对比图表\"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    \n    # 设置绘图风格\n    plt.style.use('seaborn-v0_8-whitegrid')\n    sns.set_palette(\"husl\")\n    \n    # 1. 综合性能雷达图\n    fig, ax = plt.subplots(figsize=(10, 8), subplot_kw=dict(projection='polar'))\n    \n    # 选择关键指标\n    metrics = ['energy_efficiency', 'network_lifetime', 'routing_success_rate', \n               'convergence_speed', 'adaptability', 'explainability']\n    \n    # 归一化数据到0-1范围\n    df_norm = df.copy()\n    for metric in metrics:\n        if metric in df.columns:\n            max_val = df[metric].max()\n            if max_val > 0:\n                df_norm[metric] = df[metric] / max_val\n            else:\n                df_norm[metric] = 0\n    \n    # 绘制每个算法\n    angles = np.linspace(0, 2 * np.pi, len(metrics), endpoint=False).tolist()\n    angles += angles[:1]  # 闭合图形\n    \n    for i, row in df_norm.iterrows():\n        values = [row.get(metric, 0) for metric in metrics]\n        values += values[:1]  # 闭合图形\n        \n        ax.plot(angles, values, 'o-', linewidth=2, label=row['Algorithm'])\n        ax.fill(angles, values, alpha=0.25)\n    \n    ax.set_xticks(angles[:-1])\n    ax.set_xticklabels([m.replace('_', ' ').title() for m in metrics])\n    ax.set_ylim(0, 1)\n    ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.0))\n    ax.set_title('综合算法性能对比雷达图', size=16, pad=20)\n    \n    plt.tight_layout()\n    plt.savefig(f\"{output_dir}/comprehensive_radar_{timestamp}.png\", dpi=300, bbox_inches='tight')\n    plt.savefig(f\"{output_dir}/comprehensive_radar_{timestamp}.pdf\", bbox_inches='tight')\n    plt.close()\n    \n    # 2. 关键指标条形图对比\n    fig, axes = plt.subplots(2, 3, figsize=(15, 10))\n    axes = axes.flatten()\n    \n    for i, metric in enumerate(metrics):\n        if metric in df.columns:\n            ax = axes[i]\n            values = df[metric].fillna(0)\n            bars = ax.bar(df['Algorithm'], values, alpha=0.8)\n            ax.set_title(metric.replace('_', ' ').title())\n            ax.set_ylabel('Score')\n            \n            # 添加数值标签\n            for bar, val in zip(bars, values):\n                if not np.isnan(val) and val != 0:\n                    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.01,\n                            f'{val:.3f}', ha='center', va='bottom')\n            \n            ax.tick_params(axis='x', rotation=45)\n    \n    plt.tight_layout()\n    plt.savefig(f\"{output_dir}/comprehensive_metrics_{timestamp}.png\", dpi=300, bbox_inches='tight')\n    plt.savefig(f\"{output_dir}/comprehensive_metrics_{timestamp}.pdf\", bbox_inches='tight')\n    plt.close()\n    \n    # 3. 算法复杂度vs效果散点图\n    fig, ax = plt.subplots(figsize=(10, 8))\n    \n    x = df['computational_complexity'].fillna(0)\n    y = df['energy_efficiency'].fillna(0)\n    \n    scatter = ax.scatter(x, y, s=100, alpha=0.7, c=range(len(df)), cmap='viridis')\n    \n    for i, row in df.iterrows():\n        ax.annotate(row['Algorithm'], \n                   (row.get('computational_complexity', 0), row.get('energy_efficiency', 0)),\n                   xytext=(5, 5), textcoords='offset points')\n    \n    ax.set_xlabel('计算复杂度 (s)', fontsize=12)\n    ax.set_ylabel('能耗效率', fontsize=12)\n    ax.set_title('算法复杂度 vs 能耗效率', fontsize=14)\n    ax.grid(True, alpha=0.3)\n    \n    plt.tight_layout()\n    plt.savefig(f\"{output_dir}/complexity_vs_efficiency_{timestamp}.png\", dpi=300, bbox_inches='tight')\n    plt.savefig(f\"{output_dir}/complexity_vs_efficiency_{timestamp}.pdf\", bbox_inches='tight')\n    plt.close()\n    \n    # 4. 算法总结表格\n    summary_metrics = ['energy_efficiency', 'network_lifetime', 'routing_success_rate', \n                      'computational_complexity']\n    \n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.axis('tight')\n    ax.axis('off')\n    \n    # 准备表格数据\n    table_data = []\n    for _, row in df.iterrows():\n        row_data = [row['Algorithm']]\n        for metric in summary_metrics:\n            val = row.get(metric, 0)\n            if pd.isna(val):\n                row_data.append('N/A')\n            else:\n                row_data.append(f'{val:.3f}')\n        table_data.append(row_data)\n    \n    headers = ['Algorithm'] + [m.replace('_', ' ').title() for m in summary_metrics]\n    \n    table = ax.table(cellText=table_data, colLabels=headers, cellLoc='center', loc='center')\n    table.auto_set_font_size(False)\n    table.set_fontsize(10)\n    table.scale(1.2, 1.5)\n    \n    # 设置表格样式\n    for (i, j), cell in table.get_celld().items():\n        if i == 0:  # 表头\n            cell.set_text_props(weight='bold')\n            cell.set_facecolor('#4CAF50')\n            cell.set_text_props(color='white')\n        else:\n            cell.set_facecolor('#f1f1f2')\n    \n    plt.title('算法性能对比汇总表', fontsize=16, pad=20)\n    plt.tight_layout()\n    plt.savefig(f\"{output_dir}/comprehensive_summary_{timestamp}.png\", dpi=300, bbox_inches='tight')\n    plt.savefig(f\"{output_dir}/comprehensive_summary_{timestamp}.pdf\", bbox_inches='tight')\n    plt.close()\n    \n    print(f\"✅ 综合算法对比图表已生成到: {output_dir}\")\n    print(f\"📊 生成的图表:\")\n    print(f\"   - 性能雷达图: comprehensive_radar_{timestamp}.png\")\n    print(f\"   - 关键指标对比: comprehensive_metrics_{timestamp}.png\")\n    print(f\"   - 复杂度vs效率: complexity_vs_efficiency_{timestamp}.png\")\n    print(f\"   - 性能汇总表: comprehensive_summary_{timestamp}.png\")\n\ndef main():\n    \"\"\"主函数\"\"\"\n    # 查找最新的comprehensive结果文件\n    results_dir = Path(\"results/data\")\n    json_files = list(results_dir.glob(\"comprehensive_results_*.json\"))\n    \n    if not json_files:\n        print(\"❌ 未找到comprehensive实验结果文件\")\n        return\n    \n    # 使用最新的文件\n    latest_file = max(json_files, key=lambda x: x.stat().st_mtime)\n    print(f\"📂 使用结果文件: {latest_file}\")\n    \n    # 加载数据\n    df = load_comprehensive_results(str(latest_file))\n    print(f\"📊 加载了{len(df)}个算法的结果\")\n    print(f\"算法列表: {', '.join(df['Algorithm'].tolist())}\")\n    \n    # 生成图表\n    output_dir = \"experiments/results/figures\"\n    create_comprehensive_plots(df, output_dir)\n\nif __name__ == \"__main__\":\n    main()\n"
